{"ast":null,"code":"var _jsxFileName = \"/Users/kevinalvarez/SCHOOL/CS35L/cs35L-lab3/submission/chorus-lapilli/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n//if squares[i] != null, and user clicks on it, \n//allow user to click on empty squares and replace\n//value of clicked square. The empty square must be adjecent to the clicked square\n//\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  _s();\n  const [userSquare, setuserSquare] = useState(null);\n  function handleClick(i) {\n    if (calculateWinner(squares)) {\n      return;\n    }\n    const Xcount = squares.filter(square => square === 'X').length;\n    const Ocount = squares.filter(square => square === 'O').length;\n    const currentPlayer = xIsNext ? 'X' : 'O';\n    const nextSquares = squares.slice();\n    function isWinningMove(from, to) {\n      const tempSquares = squares.slice();\n      tempSquares[to] = tempSquares[from]; // Simulate move\n      tempSquares[from] = null;\n      return calculateWinner(tempSquares) === currentPlayer;\n    }\n\n    // Only apply the \"must move center\" logic once both players have placed all 3 pieces.\n    if (Xcount === 3 && Ocount === 3) {\n      // If the current player has the center piece, they MUST move that center piece.\n      if (squares[4] === currentPlayer) {\n        // 1. If no piece is selected yet, the user must select the center if they click it.\n        if (userSquare === null) {\n          // If the player did NOT click the center, do nothing; they have to move center.\n          if (i !== 4) {\n            console.log(`Player ${currentPlayer} must move the center piece.`);\n            return;\n          }\n          // Otherwise, let them select the center\n          setuserSquare(i);\n          return;\n        }\n\n        // 2. If userSquare is not null, the only valid selection we allowed was the center\n        //    so now the user is trying to move from center to an adjacent empty square:\n        else {\n          const adjacent = adjacentSquares(userSquare);\n          if (squares[i] === null && adjacent.includes(i)) {\n            nextSquares[i] = squares[userSquare]; // Move the piece\n            nextSquares[userSquare] = null; // Clear old position\n            setuserSquare(null); // Reset selection\n            onPlay(nextSquares);\n          } else {\n            // If they click an invalid destination, deselect\n            setuserSquare(null);\n          }\n          return;\n        }\n      }\n    }\n    // If no piece is selected yet\n    if (userSquare === null) {\n      // If the square clicked isn't empty, try to select it if it matches the current player\n      if (squares[i] !== null) {\n        if (xIsNext && squares[i] === 'X' || !xIsNext && squares[i] === 'O') {\n          setuserSquare(i);\n        }\n      } else {\n        // Place a new piece if you haven't placed all 3 yet\n        if (xIsNext && Xcount < 3 || !xIsNext && Ocount < 3) {\n          nextSquares[i] = currentPlayer;\n          onPlay(nextSquares);\n        }\n      }\n    }\n    // If a piece is already selected, attempt to move it\n    else {\n      const adjacent = adjacentSquares(userSquare);\n      if (squares[i] === null && adjacent.includes(i)) {\n        nextSquares[i] = squares[userSquare]; // Move selected piece\n        nextSquares[userSquare] = null; // Clear old position\n        setuserSquare(null); // Reset selection\n        onPlay(nextSquares);\n      } else {\n        // Deselect if invalid move\n        setuserSquare(null);\n      }\n    }\n  }\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"x0l0SPq57UIa93hRMWdvzQjYmv0=\");\n_c2 = Board;\nexport default function Game() {\n  _s2();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n\n//Calculate adjacent squares\n_s2(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c3 = Game;\nfunction adjacentSquares(square) {\n  const possabilities = [[1, 3, 4],\n  //square 0\n  [0, 2, 3, 4, 5],\n  //square 1\n  [1, 4, 5],\n  //square 2\n  [0, 1, 4, 6, 7],\n  //square 3\n  [0, 1, 2, 3, 5, 6, 7, 8],\n  //square 4\n  [1, 2, 4, 7, 8],\n  //square 5\n  [3, 4, 7],\n  //square 6\n  [3, 4, 5, 6, 8],\n  //square 7\n  [4, 5, 7] //square 8\n  ];\n  return possabilities[square];\n}\n\n//leave algorithm as is\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","_s","userSquare","setuserSquare","handleClick","i","calculateWinner","Xcount","filter","square","length","Ocount","currentPlayer","nextSquares","slice","isWinningMove","from","to","tempSquares","console","log","adjacent","adjacentSquares","includes","winner","status","_c2","Game","_s2","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","handlePlay","nextHistory","_c3","possabilities","lines","a","b","c","$RefreshReg$"],"sources":["/Users/kevinalvarez/SCHOOL/CS35L/cs35L-lab3/submission/chorus-lapilli/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n//if squares[i] != null, and user clicks on it, \n//allow user to click on empty squares and replace\n//value of clicked square. The empty square must be adjecent to the clicked square\n//\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  const [userSquare, setuserSquare] = useState(null);\n\n  function handleClick(i) {\n    if (calculateWinner(squares)) {\n      return;\n    }\n\n    const Xcount = squares.filter((square) => square === 'X').length;\n    const Ocount = squares.filter((square) => square === 'O').length;\n    const currentPlayer = xIsNext ? 'X' : 'O';\n    const nextSquares = squares.slice();\n\n    function isWinningMove(from, to) {\n      const tempSquares = squares.slice();\n      tempSquares[to] = tempSquares[from]; // Simulate move\n      tempSquares[from] = null;\n      return calculateWinner(tempSquares) === currentPlayer;\n    }\n\n    // Only apply the \"must move center\" logic once both players have placed all 3 pieces.\n    if (Xcount === 3 && Ocount === 3) {\n      // If the current player has the center piece, they MUST move that center piece.\n      if (squares[4] === currentPlayer) {\n    \n        // 1. If no piece is selected yet, the user must select the center if they click it.\n        if (userSquare === null) {\n          // If the player did NOT click the center, do nothing; they have to move center.\n          if (i !== 4) {\n            console.log(`Player ${currentPlayer} must move the center piece.`);\n            return;\n          }\n          // Otherwise, let them select the center\n          setuserSquare(i);\n          return;\n        } \n        \n        // 2. If userSquare is not null, the only valid selection we allowed was the center\n        //    so now the user is trying to move from center to an adjacent empty square:\n        else {\n          const adjacent = adjacentSquares(userSquare);\n          if (squares[i] === null && adjacent.includes(i)) {\n            nextSquares[i] = squares[userSquare]; // Move the piece\n            nextSquares[userSquare] = null;       // Clear old position\n            setuserSquare(null);                  // Reset selection\n            onPlay(nextSquares);\n          } else {\n            // If they click an invalid destination, deselect\n            setuserSquare(null);\n          }\n          return;\n        }\n      }\n    }\n    // If no piece is selected yet\n    if (userSquare === null) {\n      // If the square clicked isn't empty, try to select it if it matches the current player\n      if (squares[i] !== null) {\n        if ((xIsNext && squares[i] === 'X') || (!xIsNext && squares[i] === 'O')) {\n          setuserSquare(i);\n        }\n      } else {\n        // Place a new piece if you haven't placed all 3 yet\n        if ((xIsNext && Xcount < 3) || (!xIsNext && Ocount < 3)) {\n          nextSquares[i] = currentPlayer;\n          onPlay(nextSquares);\n        }\n      }\n    } \n    // If a piece is already selected, attempt to move it\n    else {\n      const adjacent = adjacentSquares(userSquare);\n      if (squares[i] === null && adjacent.includes(i)) {\n        nextSquares[i] = squares[userSquare]; // Move selected piece\n        nextSquares[userSquare] = null;       // Clear old position\n        setuserSquare(null);                  // Reset selection\n        onPlay(nextSquares);\n      } else {\n        // Deselect if invalid move\n        setuserSquare(null);\n      }\n    }\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        {/*Board is getting called here */}\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n      </div>\n    </div>\n  );\n}\n\n//Calculate adjacent squares\nfunction adjacentSquares(square) {\n  const possabilities = [\n    [1, 3, 4],                  //square 0\n    [0, 2, 3, 4, 5],            //square 1\n    [1, 4, 5],                  //square 2\n    [0, 1, 4, 6, 7],            //square 3\n    [0, 1, 2, 3, 5, 6, 7, 8],   //square 4\n    [1, 2, 4, 7, 8],            //square 5\n    [3, 4, 7],                  //square 6\n    [3, 4, 5, 6, 8],            //square 7\n    [4, 5, 7]                   //square 8\n  ]\n  return possabilities[square];\n}\n\n//leave algorithm as is\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}